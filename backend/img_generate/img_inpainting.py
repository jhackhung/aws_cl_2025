import base64
import io
import json
import logging
import boto3
import os
from PIL import Image
from botocore.config import Config
from datetime import datetime
from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Nova models"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def inpaint_image(model_id,
                  task_id,
                  prompt,
                  mask_prompt=None,
                  mask_image=None,
                  negative_prompt=None,
                  image_bytes_list=None,
                  batch_count=1,
                  height=None,
                  width=None,
                  cfg_scale=8.0,
                  seed=0):
    """
    Generate an inpainted image using Amazon Nova model.
    
    Args:
        model_id (str): The model ID to use.
        prompt (str): Text prompt for inpainting.
        input_image_path (str): Path to the input image.
        mask_prompt (str, optional): Text description of areas to mask for inpainting.
        mask_image_path (str, optional): Path to a binary mask image file.
        negative_prompt (str): Negative text prompt.
        height (int, optional): Height of output image (uses input image height by default).
        width (int, optional): Width of output image (uses input image width by default).
        cfg_scale (float): Guidance scale for image generation.
        region_name (str): AWS region name.
        
    Returns:
        bytes: The inpainted image generated by the model.
    """
    logger.info(f"Generating inpainted image with model {model_id}")

    # Read and encode the input image

    # Get image dimensions if not specified

    if image_bytes_list:
        image = Image.open(io.BytesIO(image_bytes_list[0]))
        width, height = image.size
    else:
        raise ValueError(
            "Either height/width or input_image_path must be provided.")

    base64_images = [
        base64.b64encode(image).decode('ascii') for image in image_bytes_list
    ]
    # Prepare inpainting parameters
    inpaint_params = {
        "text": prompt,
        "negativeText": negative_prompt,
        "image": base64_images
    }

    # Add either mask prompt or mask image (mask image takes precedence)
    if mask_image:
        inpaint_params["maskImage"] = mask_image
    else:
        raise ValueError(
            "maskImage is required for inpainting with this model.")

    # Create the full request body
    body = json.dumps({
        "taskType": "INPAINTING",
        "inPaintingParams": inpaint_params,
        "imageGenerationConfig": {
            "numberOfImages": batch_count,
            "height": height,
            "width": width,
            "cfgScale": cfg_scale
        }
    })

    # Initialize Bedrock client
    bedrock = boto3.client(
        service_name='bedrock-runtime',
        config=Config(read_timeout=300),
    )

    # Call the model
    response = bedrock.invoke_model(body=body,
                                    modelId=model_id,
                                    accept="application/json",
                                    contentType="application/json")
    response_body = json.loads(response.get("body").read())

    # Check for errors
    finish_reason = response_body.get("error")
    if finish_reason is not None:
        raise ImageError(f"Image generation error: {finish_reason}")

    image_list = []
    for base64_image in response_body.get("images", []):
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)
        image_list.append(image_bytes)

    logger.info(
        "Successfully inpainting %d images with Amazon Nova Canvas model %s",
        len(image_list), model_id)

    return image_list
