# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
Shows how to generate multiple images from a text prompt with the Amazon Nova Canvas model (on demand).
"""
import base64
import io
import json
import logging
import boto3
import os
from PIL import Image
from botocore.config import Config
from datetime import datetime
from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Nova Canvas"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_images(model_id, prompt, batch_count=1, height=1024, width=1024, cfg_scale=8.0, seed=0):
    """
    Generate multiple images using Amazon Nova Canvas model on demand.
    Args:
        model_id (str): The model ID to use.
        prompt (str): The text prompt for image generation.
        batch_count (int): Number of images to generate.
        height (int): Height of the generated images.
        width (int): Width of the generated images.
        cfg_scale (float): Guidance scale for image generation.
        seed (int): Seed for reproducibility.
    Returns:
        list: List of image bytes generated by the model.
    """
    logger.info(
        "Generating %d images with Amazon Nova Canvas model %s", batch_count, model_id)

    bedrock = boto3.client(
        service_name='bedrock-runtime',
        config=Config(read_timeout=300)
    )

    body = json.dumps({
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": batch_count,
            "height": height,
            "width": width,
            "cfgScale": cfg_scale,
            "seed": seed
        }
    })

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    finish_reason = response_body.get("error")
    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    image_list = []
    for base64_image in response_body.get("images", []):
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)
        image_list.append(image_bytes)

    logger.info(
        "Successfully generated %d images with Amazon Nova Canvas model %s", 
        len(image_list), model_id)

    return image_list


def save_images(image_bytes_list, output_dir="generated_images"):
    """
    Save generated images to disk.
    Args:
        image_bytes_list (list): List of image bytes to save.
        output_dir (str): Directory to save images to.
    Returns:
        list: List of saved image paths.
    """
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    saved_paths = []
    
    for i, image_bytes in enumerate(image_bytes_list):
        image = Image.open(io.BytesIO(image_bytes))
        filepath = os.path.join(output_dir, f"image_{timestamp}_{i}.jpg")
        image.save(filepath)
        saved_paths.append(filepath)
        logger.info(f"Saved image to {filepath}")
    
    return saved_paths


def main():
    """
    Entrypoint for Amazon Nova Canvas example.
    """
    logging.basicConfig(level=logging.INFO,
                        format="%(levelname)s: %(message)s")

    # Configure these parameters as needed
    model_id = 'amazon.nova-canvas-v1:0'  # Using Nova Pro as specified
    prompt = "A futuristic PC case design with sleek curves and advanced cooling systems, featuring transparent panels, RGB lighting, and a metallic cyberpunk aesthetic. The case is floating in a minimalistic tech showroom with soft ambient lighting. Hyper-detailed, high-tech materials, concept art style."
    batch_count = 3  # Generate multiple images in one call
    height = 1024
    width = 1024
    cfg_scale = 8.0
    seed = 0

    try:
        image_bytes_list = generate_images(
            model_id=model_id,
            prompt=prompt,
            batch_count=batch_count,
            height=height,
            width=width,
            cfg_scale=cfg_scale,
            seed=seed
        )
        
        # Save images to disk
        saved_paths = save_images(image_bytes_list)
        
        # Display images
        for image_bytes in image_bytes_list:
            image = Image.open(io.BytesIO(image_bytes))
            image.show()

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print(f"A client error occurred: {message}")
    except ImageError as err:
        logger.error(err.message)
        print(err.message)
    else:
        print(
            f"Finished generating {batch_count} images with Amazon Nova model {model_id}.")
        print(f"Images saved to: {', '.join(saved_paths)}")


if __name__ == "__main__":
    main()